FROM python:3.11-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    clamav \
    dos2unix \
    libmagic1 \
    gcc \
    g++ \
    libyara-dev \
    make \
    wget \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set up Python environment and install dependencies FIRST (to preserve cache)
WORKDIR /app

# Copy base requirements first (large, stable dependencies)
COPY docker/requirements-base.txt .

# Install base dependencies (these rarely change - includes torch, etc.)
RUN pip install -r requirements-base.txt --timeout 120 --index-url https://pypi.org/simple --extra-index-url https://download.pytorch.org/whl/cpu

# Copy app requirements (smaller, more frequently changing dependencies)
COPY docker/requirements-app.txt .

# Install app dependencies (these change more frequently)
RUN pip install -r requirements-app.txt --timeout 120 --index-url https://pypi.org/simple

# EMBER2024 installation removed

# Create ClamAV virus database directory
RUN mkdir -p /var/lib/clamav \
    && chmod 755 /var/lib/clamav

# ClamAV virus databases are now provided via shared volume mount
# No need to download during build - they're mounted at runtime

# ClamAV shared volume check is done in pre-build validation script
# This ensures the volume exists before building starts

# Test ClamAV detection capabilities during build (not at runtime)
RUN echo "🧪 Testing ClamAV detection capabilities during build..." \
    && echo "X5O!P%@AP[4\PZX54(P^)7CC)7}\$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!\$H+H*" > /tmp/eicar_test.txt \
    && if clamscan /tmp/eicar_test.txt > /tmp/clamav_test.log 2>&1; then \
        echo "❌ ERROR: ClamAV should have detected EICAR test file as infected!" \
        && echo "Test log:" \
        && cat /tmp/clamav_test.log \
        && exit 1; \
    else \
        echo "✅ ClamAV correctly detected EICAR test file as infected (exit code 1)" \
        && echo "Test log:" \
        && cat /tmp/clamav_test.log; \
    fi \
    && rm -f /tmp/eicar_test.txt /tmp/clamav_test.log

# Copy ML models and threat intelligence data (these rarely change - good for caching)
COPY data/ml_models /app/data/ml_models/
COPY data/threat_intel /app/data/threat_intel/

# Qu1cksc0pe removed - no longer needed

# EMBER features file removed


# Copy application code (this will invalidate cache only when app code changes)
COPY app app/
COPY rules rules/

# Create required directories for the application
RUN mkdir -p /app/data/ml_models \
    && mkdir -p /app/data/yara_rules \
    && mkdir -p /app/data/threat_intel \
    && mkdir -p /app/temp \
    && chmod 755 /app/data \
    && chmod 755 /app/data/ml_models \
    && chmod 755 /app/data/yara_rules \
    && chmod 755 /app/data/threat_intel \
    && chmod 755 /app/temp

# Create startup script for scan worker (updated with ClamAV auto-setup and testing)
RUN echo "Building startup script with ClamAV auto-setup..." && echo '#!/bin/bash\n\
# Network security is handled at application level\n\
echo "Network security: Application-level restrictions active for MalwareBazaar API only"\n\
\n\
# Function to setup ClamAV shared volume if needed\n\
setup_clamav_volume() {\n\
    echo "🔧 Setting up ClamAV shared volume..."\n\
    \n\
    # Check if volume directory exists and has virus definitions\n\
    if [ -d /var/lib/clamav ] && [ "$(ls -A /var/lib/clamav/*.cvd 2>/dev/null)" ]; then\n\
        echo "✅ Found existing ClamAV databases: $(ls /var/lib/clamav/*.cvd | wc -l) files"\n\
        return 0\n\
    fi\n\
    \n\
    echo "⚠️  No ClamAV databases found. Setting up shared volume..."\n\
    \n\
    # Create volume directory if it doesn'\''t exist\n\
    mkdir -p /var/lib/clamav\n\
    chmod 755 /var/lib/clamav\n\
    \n\
    # Download virus definitions\n\
    echo "📥 Downloading ClamAV virus definitions..."\n\
    \n\
    # Download main.cvd if not present\n\
    if [ ! -f /var/lib/clamav/main.cvd ]; then\n\
        echo "Downloading main.cvd..."\n\
        wget -q -O /var/lib/clamav/main.cvd https://database.clamav.net/main.cvd\n\
    fi\n\
    \n\
    # Download daily.cvd if not present\n\
    if [ ! -f /var/lib/clamav/daily.cvd ]; then\n\
        echo "Downloading daily.cvd..."\n\
        wget -q -O /var/lib/clamav/daily.cvd https://database.clamav.net/daily.cvd\n\
    fi\n\
    \n\
    # Download bytecode.cvd if not present\n\
    if [ ! -f /var/lib/clamav/bytecode.cvd ]; then\n\
        echo "Downloading bytecode.cvd..."\n\
        wget -q -O /var/lib/clamav/bytecode.cvd https://database.clamav.net/bytecode.cvd\n\
    fi\n\
    \n\
    # Set proper permissions\n\
    chmod 644 /var/lib/clamav/*.cvd 2>/dev/null || true\n\
    \n\
    echo "✅ ClamAV virus definitions downloaded successfully"\n\
    echo "📋 Database files:"\n\
    ls -la /var/lib/clamav/\n\
    echo "📊 Database sizes:"\n\
    du -h /var/lib/clamav/*.cvd 2>/dev/null || echo "No .cvd files found"\n\
}\n\
\n\
# Setup ClamAV volume if needed\n\
setup_clamav_volume\n\
\n\
# Verify ClamAV databases are available\n\
echo "🔍 Verifying ClamAV databases..."\n\
if [ -d /var/lib/clamav ] && [ "$(ls -A /var/lib/clamav/*.cvd 2>/dev/null)" ]; then\n\
    echo "✅ ClamAV databases ready: $(ls /var/lib/clamav/*.cvd | wc -l) files"\n\
else\n\
    echo "❌ ERROR: ClamAV databases not available!"\n\
    echo "Available files in /var/lib/clamav:"\n\
    ls -la /var/lib/clamav/ 2>/dev/null || echo "Directory not accessible"\n\
    exit 1\n\
fi\n\
\n\
# ClamAV testing completed during build - no need to test at runtime
\n\
# Verify clamscan binary is available\n\
echo "Verifying clamscan availability..."\n\
if command -v clamscan >/dev/null 2>&1; then\n\
    echo "clamscan binary found: $(which clamscan)"\n\
    clamscan --version\n\
else\n\
    echo "ERROR: clamscan binary not found!"\n\
    exit 1\n\
fi\n\
\n\
# Create /scan directory before running scan worker\n\
echo "Creating /scan directory..."\n\
mkdir -p /scan\n\
echo "✅ /scan directory created successfully"\n\
\n\
# Debug: Print environment variables and config\n\
echo "=== CONFIGURATION DEBUG ==="\n\
echo "Environment variables:"\n\
echo "SCAN_FILE_PATH: $SCAN_FILE_PATH"\n\
echo "SCAN_TIMEOUT: $SCAN_TIMEOUT"\n\
echo "SCAN_MODE: $SCAN_MODE"\n\
echo "=== END DEBUG ==="\n\
\n\
# Method 1: Check environment variables (primary method)\n\
if [ -n "$SCAN_FILE_PATH" ] && [ -n "$SCAN_TIMEOUT" ]; then\n\
    echo "Using environment variables: SCAN_FILE_PATH=$SCAN_FILE_PATH, SCAN_TIMEOUT=$SCAN_TIMEOUT"\n\
    exec python /app/app/scanner/scan_worker.py --file "$SCAN_FILE_PATH" --timeout "$SCAN_TIMEOUT"\n\
fi\n\
\n\
# Method 2: Check if config file exists\n\
if [ -f /scan_config.env ]; then\n\
    echo "Loading configuration from /scan_config.env"\n\
    source /scan_config.env\n\
    if [ -n "$SCAN_FILE_PATH" ] && [ -n "$SCAN_TIMEOUT" ]; then\n\
        echo "Using config file: SCAN_FILE_PATH=$SCAN_FILE_PATH, SCAN_TIMEOUT=$SCAN_TIMEOUT"\n\
        exec python /app/app/scanner/scan_worker.py --file "$SCAN_FILE_PATH" --timeout "$SCAN_TIMEOUT"\n\
    fi\n\
fi\n\
\n\
# Method 3: Fallback - try to find files in /scan directory\n\
echo "No configuration found, checking /scan directory..."\n\
if [ -d /scan ] && [ "$(ls -A /scan)" ]; then\n\
    SCAN_FILE=$(ls /scan/* | head -n1)\n\
    echo "Found file in /scan: $SCAN_FILE"\n\
    exec python /app/app/scanner/scan_worker.py --file "$SCAN_FILE" --timeout "${SCAN_TIMEOUT:-300}"\n\
fi\n\
\n\
# Method 4: Last resort - show help\n\
echo "No configuration or files found, showing help..."\n\
exec python /app/app/scanner/scan_worker.py --help\n\
' > /start.sh && chmod +x /start.sh

# Set the default command
CMD ["/start.sh"] 